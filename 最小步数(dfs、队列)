import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class 最小步数 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        Queue<Integer> qdis = new LinkedList<>();
        int[] dx = new int[]{-2, 2,-2, 2,-2,-1, 1, 2,-2,-1, 2, 1};
        int[] dy = new int[]{-2,-2, 2, 2,-1,-2,-2,-1,-1,-2, 1, 2};
        int[][] iRet = new int[101][101];
        int x1 = sc.nextInt(), y1 = sc.nextInt(), x2 = sc.nextInt(), y2 = sc.nextInt();
        for(int i=0; i<101; i++) Arrays.fill(iRet[i], -1);
        qx.add(1);
        qy.add(1);
        qdis.add(0);
        while(!qx.isEmpty() && !qy.isEmpty() && !qdis.isEmpty()) {
            for(int i=0; i<12; i++) {
                int xTemp = qx.element() + dx[i];
                int yTemp = qy.element() + dy[i];
                if(xTemp > 0 && yTemp > 0 && xTemp <= 100 && yTemp <= 100 && iRet[xTemp][yTemp] == -1) {
                    iRet[xTemp][yTemp] = qdis.element() + 1;
                    qx.add(xTemp);
                    qy.add(yTemp);
                    qdis.add(iRet[xTemp][yTemp]);
                    if(iRet[x1][y1] != -1 && iRet[x2][y2] != -1) {
                        System.out.println(iRet[x1][y1]);
                        System.out.println(iRet[x2][y2]);
                        System.exit(-1);
                    }
                }
            }
            qx.remove();
            qy.remove();
            qdis.remove();
        }
    }
}
